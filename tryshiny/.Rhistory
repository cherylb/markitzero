fill = "darkcyan", alpha = 0.4)
ggplot(data = l, aes(x=x)) +
geom_histogram(aes(y = ..density..),
fill = "darkcyan", alpha = 0.4)
1000/50
2/50
ggplot(data = l, aes(x=x), binwidth = .04) +
geom_histogram(aes(y = ..density..),
fill = "darkcyan", alpha = 0.4)
ggplot(data = l, aes(x=x)) +
geom_histogram(aes(y = ..density..), binwidth = .04
fill = "darkcyan", alpha = 0.4)
geom_histogram(aes(y = ..density..), binwidth = .04,
ggplot(data = l, aes(x=x)) +
geom_histogram(aes(y = ..density..), binwidth = .04,
fill = "darkcyan", alpha = 0.4)
hist(l$x,50,freq = FALSE)
df <- data.frame(x = sampf(1000))
ggplot(data = df, aes(x=x)) +
geom_histogram(aes(y = ..density..), binwidth = .04,
fill = "darkcyan", alpha = 0.4)
ggplot(data = df, aes(x=x)) +
geom_histogram(aes(y = ..density..), binwidth = .02,
fill = "darkcyan", alpha = 0.4)
ggplot(data = df, aes(x=x)) +
geom_histogram(aes(y = ..density..), binwidth = .1,
fill = "darkcyan", alpha = 0.4)
l <- sampf(1000)
hist(l,50,freq = FALSE)
hist(mean.p,50,freq = FALSE)
plt.mean(10,"px1")
plt.mean <- function(n,pdf, lb = 0, ub = 2){
# n is the sample size
# pdf is the name of a pdf function that returns the probablity of given x
# lb is the lower bound of samples to use in this pdf, default 0
# ub is the upper bound of samples to use in this pdf, default 2
p <- match.fun(pdf) #p is pdf function
mean.p <-c()
i <- 0
while(i <= 1000){
vals <- seq(lb,ub, by = .01)  #values in range given by lb, ub
s <- sample(vals, n, replace = TRUE, prob = sapply(vals,p))
mean.p <- c(mean.p, mean(s)) # mean of sample
i <- i + 1
}
dfx <- data.frame(mean.p)
m <- mean(mean.p)
stv <- sd(mean.p)
ggplot(data = dfx, aes(x=mean.p)) +
geom_histogram(aes(y = ..density..), binwidth = .005,
fill = "darkcyan", alpha = 0.4)+
stat_function(geom="line", fun=dnorm, arg=list(mean=m, sd=stv),
colour = "#003333")
}
# function for problem 1
px1 <- function(x){
p = NULL
if(x >= 0 && x <=1){
p <- x
}else{
if(x <= 2 && x >1){
p <- 2-x}
}
return(p)
}
plt.mean(10,"px1")
plt.mean(20,"px1")
plt.mean(30,"px1")
plt.mean(100,"px1")
plt.mean(50,"px1")
plt.mean(100,"px1")
plt.mean(10,"px2")
plt.mean(20,"px2")
plt.mean(100,"px2")
plt.mean(10,"px2")
plt.mean(20,"px2")
plt.mean(100,"px2")
A = diag(6)
A
A[1,] = c(0, .5, .5, 0, 0, 0)
A
A[2,] = c(0, 0, 1, 0, 0,0)
A[3,] = c(.25, .25, 0, 0, .25, .25)
A[4,] = c(0,0,0,0,.5, .5)
A[5,] = c(0, 0, 1/3, 1/3, 0, 1/3)
A[6,] = c(0,0,1/3,1/3,1/3, 0)
A
A = t(A)
A
A = diag(6)
A[,1] = c(0, .5, .5, 0, 0, 0)
A[,2] = c(0, 0, 1, 0, 0,0)
A[,3] = c(.25, .25, 0, 0, .25, .25)
A[,4] = c(0,0,0,0,.5, .5)
A[,5] = c(0, 0, 1/3, 1/3, 0, 1/3)
A[,6] = c(0,0,1/3,1/3,1/3, 0)
A
A = diag(6)
A[,1] = c(0, .5, .5, 0, 0, 0)
A[,2] = c(0, 0, 1, 0, 0,0)
A[,3] = c(.25, .25, 0, 0, .25, .25)
A[,4] = c(0,0,0,0,.5, .5)
A[,5] = c(0, 0, 0, .5, 0, .5)
A[,6] = c(0,0,.5,.5,0, 0)
A
1/6
r = rep(1/6,6)
r
A * r
A %*% r
solve(A)
eigen(A)
B = d * A + (1-d)/n
B = d * A + (1-d)/n
d <-.85
n <- 6
B <- d * A + (1-d)/n
B
k <- 100
r = rep(1/n, n)
rtest <- B^k %*% r
rtest
k <- 1
rtest <- B^k %*% r
rtest
k <- 10
rtest <- B^k %*% r
rtest
B
B %*% B
B %*% B %*% B
B %*% B %*% B %*% B
det(B)
B %*% B
B^10
r.o = rep(1/n, n)
r
B %*% r
1/24
A %*% r
k <- 10
rtest = rep(1/n, n)
k <- 10
i <- 1
rtest = rep(1/n, n)
while(i <- k){
rtest <- B %*% rtest
i <- i +1
}
k <- 2
i <- 1
rtest = rep(1/n, n)
while(i <= k){
rtest <- B %*% rtest
i <- i +1
}
rtest
k <- 10
i <- 1
r = rep(1/n, n)  # intial value for r is uniform distribution
while(i <= k){
r <- B %*% r
i <- i +1
}
r
k <- 50
i <- 1
r = rep(1/n, n)  # intial value for r is uniform distribution
while(i <= k){
r <- B %*% r
i <- i +1
}
r
while(i <= 25){
r <- B %*% r
i <- i +1
}
r
k25 = r
while(i <= 50){
r <- B %*% r
i <- i +1
}
k50 = r
k25 - k50
kten - k25
while(i <= 10){
r <- B %*% r
i <- i +1
}
kten = r
while(i <= 20){
r <- B %*% r
i <- i +1
}
k25 = r
kten - k25
kten
while(i <= 5){
r <- B %*% r
i <- i +1
}
r
r = rep(1/n, n)  # intial value for r is uniform distribution
while(i <= 5){
r <- B %*% r
i <- i +1
}
kten = r
r = rep(1/n, n)
while(i <= 10){
r <- B %*% r
i <- i +1
}
k20 = r
kten - k20
r = rep(1/n, n)
while(i <= 5){
r <- B %*% r
i <- i +1
}
kten = r
r
kten
while(i <= 5){
r <- B %*% r
i <- i +1
}
kten <- r
kten
i = 1
while(i <= 5){
r <- B %*% r
i <- i +1
}
kten <- r
kten
i
while(i <= 10){
r <- B %*% r
i <- i +1
}
k10 = r
k10
k5 - k10
r = rep(1/n, n)  # intial value for r is uniform distribution
i = 1
while(i <= 5){
r <- B %*% r
i <- i +1
}
k5 <- r
k5
i
while(i <= 10){
r <- B %*% r
i <- i +1
}
k10 = r
kt10
k10
k10 - k5
while(i <= 15){
r <- B %*% r
i <- i +1
}
k15 <- r
k15 - k10
i <- 1
r = rep(1/n, n)  # intial value for r is uniform distribution
i = 1
while(i <= 5){
r <- B %*% r
i <- i +1
}
k5 <- r
while(i <= 10){
r <- B %*% r
i <- i +1
}
k10 <- r
while(i <= 20){
r <- B %*% r
i <- i +1
}
k20 <- r
k20 - k10
r = rep(1/n, n)  # intial value for r is uniform distribution
i = 1
while(i <= 10){
r <- B %*% r
i <- i +1
}
k10 <- r
while(i <= 20){
r <- B %*% r
i <- i +1
}
k20 <- r
while(i <= 50){
r <- B %*% r
i <- i +1
}
k50 <- r
k20
k50 - k20
r = rep(1/n, n)  # intial value for r is uniform distribution
i = 1
while(i <= 10){
r <- B %*% r
i <- i +1
}
k10 <- r
while(i <= 50){
r <- B %*% r
i <- i +1
}
k50 <- r
while(i <= 100){
r <- B %*% r
i <- i +1
}
k100 <- r
k100 - k50
while(i <= 100){
r <- B %*% r
i <- i +1
}
k100 <- r
k100 - k50
eigen(B)$values
x <- eigen(B)$vectors
x
x[1]
x[[1]]
x[,1]
k_100
k100
eigen(B)
x[1]
x[,1]
x <- round(x,[,1],4)
x <- round(x[,1], 4)
x
y <- round(k100, 4)
y
x/y
<- evecB[1] - k100
dif<- evecB[1] - k100
evalB <- eigne(B)$values
evecB <- eigen(B)$vectors
evalB <- eignen(B)$values
evecB <- eigen(B)$vectors
evalB <- eigen(B)$values
evecB <- eigen(B)$vectors
dif<- evecB[1] - k100
dif
dif<- evecB[,1] - k100
dif
evecB
dif<- evecB[1]/k100
round(dif,4)
dif
dif<- evecB[,1]/k100
dif
ref(B)
rref(B)
library(pracma)
rref(B)
ref(B)
diff %*% times (evecB)
diff %*% evecB
evecB
diff %*% evecB[,1]
diff
dif
dif %*% evecB[,1]
dif<- (evecB[,1]/k100 )[1]
dif
dif %*% evecB[,1]
dif *evecB[,1]
dif * k100
max(evalB)
evalB
class(B)
evalB <- eigen(B)$values[,1]
evalB <- eigen(B)$values[1]
class(evalB)
max(evalB)
type(evalB)
evalB
evalB <- eigen(B)$values
class(evalB)
to.number(evalB)
evalB
Re(evalB[1])
evalB <- Re(eigen(B)$values)
evalB
max(Re(evalB))
evalB <- eigen(B)$values
evecB
dif<- (evecB[,1]/k100 )[1]
dif
dif<- Re((evecB[,1]/k100 )[1])
dif
evecB[,1]
evecB[,1]/k100
evalB1 <- Re(evalB[,1])
evalB
evalB <- eigen(B)$values
evalB
evalB1 <- Re(evalB[1])
eval B1
evalB1
convmat(B)
covmat(B)
conmat
convmat <- function(X){
M <- paste("\\begin{bmatrix}","\n")
i = 1
n = nrow(X)
if(is.null(n)){
n <- length(X)
while(i <= n){
M <- paste(M, paste(round(X[i],4), collapse = " & "),"\\\\ \n")
i = i + 1
}
}else{
while(i <= n){
M <- paste(M, paste(round(X[i,],4), collapse = " & "),"\\\\ \n")
i = i + 1
}
}
M <- paste(M, "\\end{bmatrix}","\n", collapse = "")
return (M)
}
convmat(B)
convmat(A)
library("graph", lib.loc="~/R/win-library/3.1")
page.rank?
?
??page.rank()
page.rank(A)
graph??
?graph()
library(graph)
graph
graph()
page.rank()
library("igraph", lib.loc="~/R/win-library/3.1")
?page.rank
page.rank(A)
igraphdemo()
igraphdemo()
demo(package = igraph)
demo(package = 'igraph')
crashR
demo(package = 'igraph').crashR
demo(crashR)
??igraph()
g <- graph.formula(1->2,1<->3, 3 <-> 2, 3<->6, 3->5, 6 <->4, 5->6, 5 <-> 4)
g <- graph.formula(1-+2,1-+3, 3 +-+ 2, 3+-+6, 3-+5, 6 +-+4, 5-+6, 5 +-+ 4)
g
g
plot(g)
page.rank(g, directed = True)
page.rank(g, directed = TRUE)
g <- graph.formula(1-+2,1+-+3, 3 +-+ 2, 3+-+6, 3-+5, 6 +-+4, 5-+6, 5 +-+ 4)
b
g
page.rank(g, directed = TRUE)
rnew  <- page.rank(g, directed = TRUE)$vector
rnew
r
library('igraph')
rnew.names
names(rnew)
matrix(rnew)
r
sort(rnew)
a <- order(names(rnew))
a
sort(names(rnew))
matrix(a)
a.index
index(a)
matrix(rnew)
rnew
y[sort(order(y)[x])]
a <- order(names(rnew))
a
a <- rnew[order(names(rnew)]
a <- rnew[order(names(rnew))]
a
rnew <- matrix(rnew[order(names(rnew))])
rnew
convmat(A)
A
#define A, 6 X 6 matrix
A = diag(6)
A[,1] = c(0, .5, .5, 0, 0, 0)
A[,2] = c(0, 0, 1, 0, 0,0)
A[,3] = c(.25, .25, 0, 0, .25, .25)
A[,4] = c(0,0,0,0,.5, .5)
A[,5] = c(0, 0, 0, .5, 0, .5)
A[,6] = c(0,0,.5,.5,0, 0)
A
convmat(A)
cat(convmat(A))
cat(convmat(B))
convmat(k10)
cat(convmat(k10))
